script:
  kla_alexa_play:
    alias: Alexa Play
    icon: mdi:play
    mode: queued
    max: 10
    description:
      Falls Alexa sprechen darf (bestimmte Zeiten etc.), liest die dafür
      definierte Gruppe die als Parameter übergebene Nachricht vor
    fields:
      message:
        description: Nachricht, welche Alexa vorlesen soll
        example: Was darf ich für dich tun?
      alexa:
        description:
          Alexa, welche sprechen soll (optional, 
          es spricht der zuletzt aktive Echo)
        example: echo_show8
      type:
        description: Alexa Ausgabetyp [TTS/command/sequence] (optional)
        example: tts
      volume_level:
        description:
          Lautstärke in der die Nachricht vorgelesen werden soll [0-30]
          (optional, ursprüngliche Lautstärke wird wieder zurückgesetzt)
        example: "1"
      force:
        description: Überspringe die Prüfungen, ob Alexa reden darf (optional)
        example: "true"
    sequence:
      - condition: or
        conditions:
          - condition: template
            value_template: >
              {{ force is defined and force }}
          - condition: and
            conditions:
              - condition: state
                entity_id: binary_sensor.kla_alexa_is_allowed_to_speak
                state: "on"
              - condition: state
                entity_id: binary_sensor.kla_anyone_home
                state: "on"
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ alexa is defined and alexa != ''
                    and states('media_player.' + alexa) not in ['None', 'unknown', 'unavailable']
                    and volume_level is defined
                    and (0 <= (volume_level | int(0)) <= 30) }}
            sequence:
              - service: input_number.set_value
                data_template:
                  value: >
                    {% set alexa_media = 'media_player.' + alexa %}
                    {% if (state_attr(alexa_media, 'volume_level') | float(0.33)) > 0 %}
                      {{ state_attr(alexa_media, 'volume_level') | float(0.33) }}
                    {% else %}
                      {{ ((volume_level | int(0)) / 30 | float(0.33)) | round(2) }}
                    {% endif %}
                entity_id: input_number.kla_alexa_volume_tmp
              - condition: template
                value_template: >
                  {{ (state_attr('media_player.' + alexa, 'volume_level') | float(0.33)) !=
                    ((volume_level | int(0)) / 30 | float(0.33)) | round(2) }}
              - service: media_player.volume_set
                data_template:
                  entity_id: media_player.{{ alexa }}
                  volume_level: >
                    {{ ((volume_level | int(0)) / 30 | float(0.03)) | round(2) }}
        default: []
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ type is not defined or (type is defined and type == "tts") }}
            sequence:
              - service: >
                  {% if alexa is defined and alexa != '' -%}
                    notify.alexa_media_{{ alexa }}
                  {%- elif states(states('sensor.kla_alexa_last_active')) not in ['None', 'unknown', 'unavailable'] -%}
                    notify.alexa_media_{{ states('sensor.kla_alexa_last_active').split('.')[1]}}
                  {% endif %}
                data_template:
                  data:
                    type: tts
                  message: "{{ message }}"
          - conditions:
              - condition: template
                value_template: >
                  {{ type is defined and type == "command" }}
            sequence:
              - service: media_player.play_media
                data_template:
                  entity_id: >
                    {% if alexa is defined and alexa != '' -%}
                      media_player.{{ alexa }}
                    {%- elif states(states('sensor.kla_alexa_last_active'))
                      not in ['None', 'unknown', 'unavailable'] -%}
                    {{ states('sensor.kla_alexa_last_active') }}{% endif %}
                  media_content_id: "{{ message }}"
                  media_content_type: custom
          - conditions:
              - condition: template
                value_template: >
                  {{ type is defined and type == "sequence" }}
            sequence:
              - service: media_player.play_media
                data_template:
                  entity_id: >
                    {% if alexa is defined and alexa != '' -%}
                      media_player.{{ alexa }}
                    {%- elif states(states('sensor.kla_alexa_last_active'))
                      not in ['None', 'unknown', 'unavailable'] -%}
                    {{ states('sensor.kla_alexa_last_active') }}{% endif %}
                  media_content_id: "{{ message }}"
                  media_content_type: sequence
        default: []
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ alexa is defined and alexa != ''
                    and states('media_player.' + alexa) not in ['None', 'unknown', 'unavailable']
                    and volume_level is defined
                    and (0 <= (volume_level | int(0)) <= 30)
                    and state_attr('media_player.' + alexa, 'volume_level') !=
                    states('input_number.kla_alexa_volume_tmp') }}
            sequence:
              - service: media_player.volume_set
                data_template:
                  entity_id: >
                    {{ 'media_player.' + alexa }}
                  volume_level: >
                    {{ states('input_number.kla_alexa_volume_tmp') | float(0.33) }}
        default: []
